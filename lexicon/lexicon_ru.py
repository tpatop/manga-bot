from database.db_users import read_manga_in_target, _get_user
from database.db_description import _get_description
from lexicon.const_url import URL_MANGA
from database.management import DatabaseManagement
from services.hash_all import hash_full_text


async def user_menu_text(user_id: str, db_management: DatabaseManagement):
    user = await _get_user(user_id, db_management)
    if user.target is not None:  # and user.target != '':
        manga_count = len(user.target.split(' * '))
    else:
        manga_count = 0
    return f'''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {user.fullname}!
    –¢—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å <u><b>{manga_count}</b></u> –ø—Ä–æ–µ–∫—Ç–æ–≤!
    –¢—ã {('–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω', '–ø–æ–¥–ø–∏—Å–∞–Ω')[user.all_target]} –Ω–∞ –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    –ë–æ—Ç {('–Ω–µ –º–æ–∂–µ—Ç', '–º–æ–∂–µ—Ç')[user.live_status]} –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å—Å—ã–ª–∫—É.'''


LEXICON: dict[str, str] = {
    'bad_message_answer': '''–ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è!''',
    '/start':   '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–æ—Ç–∞!
    –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ü–µ–ª—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤—ã–±–∏—Ä–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –Ω–µ –∫—É—Å–∞–µ—Ç :)''',
    '/help': f'''–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã—Ö–æ–¥–æ–º –Ω–æ–≤—ã—Ö –≥–ª–∞–≤ —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –º–∞–Ω–≥–∏!

    –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è —Å —Å–∞–π—Ç–æ–≤: <b>{', '.join(URL_MANGA)}</b>

    –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—à—É —Ç–µ–±—è —Å–æ–æ–±—â–∏—Ç—å –º–Ω–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ <b>@my_bot_helper</b>. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–¥–æ–±—Ä—è—é—Ç—Å—è :)''',
    'add_manga_page': f'''–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
    1. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Å–∞–π—Ç–æ–≤: {', '.join(URL_MANGA)}
    2. –ù–∞–π—Ç–∏ –º–∞–Ω–≥—É, –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
    3. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
    4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–Ω–≥—É –≤ –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
    5. –ñ–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! :)''',
    'delete_manga_page': '''–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
    1. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞–Ω–≥–∏
    2. –î–æ–∂–¥–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    3. –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º :)''',
    'successful_add': '–î–∞–Ω–Ω–∞—è –º–∞–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
    'successful_del': '–î–∞–Ω–Ω–∞—è –º–∞–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞!',
    'show_update': '''–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
    1. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    2. –î–æ–∂–¥–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    3. –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º :)

    –û–¥–Ω–∞–∫–æ –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω: –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏—Ä—É–µ—Ç –º–µ–Ω—å—à–µ–µ!''',
    'settings_menu': '–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n'
    }


# –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π, –¥–± –Ω–µ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–º–∏, –ø–æ–¥ —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–∫–∏
LEXICON_COMMAND: dict[str, str] = {
    '/help': '''‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ''',
    '/user_menu': '''–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    }


LEXICON_COMMAND_USER_MENU: dict[str, str] = {
    '/settings': '''üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è''',
    '/manga_target': '''–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –º–∞–Ω–≥–∏''',
    '/show_update': '''–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è''',
    '/start': '''üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'''
}


LEXICON_COMMAND_READ_MANGA: dict[str, str] = {
    '/manga_add': '''‚ûï–î–æ–±–∞–≤–∏—Ç—å''',
    '/manga_delete': '''üóë–£–¥–∞–ª–∏—Ç—å''',
    '/user_menu': '''üîô–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è''',
    '/start': '''üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'''
}


LEXICON_SETTINGS: dict[str, str] = {
    '/all_target_false': '‚úÖ–ü–æ–ª—É—á–∞—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞!',
    '/all_target_true': '‚ùå–ù–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!',
    '/status_live_false': '‚úÖ–ü–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!',
    '/status_live_true': '‚ùå–ù–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!'
}


# LEXICON_MENU_COMMAND: dict[str, str] = {
#     '/help': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ'
#     }


LEXICON_UPDATE_COMMAND: dict[str, str] = {
    '/review': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö',
    '/del_update': '–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'
}


LEXICON_REVIEW_COMMAND_DEL: dict[str, str] = {
    '/del_manga_in_target': '–£–¥–∞–ª–∏—Ç—å –º–∞–Ω–≥—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö',
    '/del_update': '–£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ'
}


LEXICON_REVIEW_COMMAND: dict[str, str] = {
    '/add_manga_in_target': '–î–æ–±–∞–≤–∏—Ç—å –º–∞–Ω–≥—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ',
    '/del_update': '–£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ'
}


LEXICON_SHOW_UPDATE_VIEWER: dict[str, str] = {
    '/showup* 5': '5 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
    '/showup* 10': '10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
    '/showup* 20': '20 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
    '/showup* 30': '30 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
}


TIME_DELETE = 5
warning_message = f'''\n\n–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {TIME_DELETE} —Å–µ–∫—É–Ω–¥!\n\n'''


async def text_manga_target(
    user_id: int, db_management: DatabaseManagement
) -> str:
    text = '''–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –º–∞–Ω–≥–∏:\n\n'''
    manga_names_link_list = await read_manga_in_target(user_id, db_management)
    if manga_names_link_list is not None:
        for i, name_link_tuple in enumerate(manga_names_link_list, 1):
            text += f'{i}. \t<a href="{name_link_tuple[1]}">{name_link_tuple[0]}</a>\n'
    else:
        text += '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!'
    return text


async def text_manga_list_target(
        user_id: int, db_management: DatabaseManagement
) -> list[tuple[str, str]]:
    manga_list = await read_manga_in_target(user_id, db_management)
    if manga_list is not None:
        manga_name = [manga_tuple[0] for manga_tuple in manga_list]
        return manga_name
    return None


LEN_UPDATE_LIST: int = 10


async def text_update_manga_for_all(
        i: int, updates: list,
        db_management: DatabaseManagement
):
    text: str = ''
    if updates is not None:
        for j, manga in enumerate(updates, i * LEN_UPDATE_LIST + 1):
            if j == 1:
                text = '''–í—ã—à–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n'''
            descr = await _get_description(
                await hash_full_text(manga.name),
                db_management
            )
            link = descr.link
            text += f'\t{j}. <a href="{link}">{manga.name}</a>\n'
            if manga.chapter_start is None:
                text += '–ë–µ–∑ –≥–ª–∞–≤!\n'
            elif manga.chapter_end is None:
                text += f'–ù–æ–≤–∞—è –≥–ª–∞–≤–∞:\t{manga.chapter_start}\n'
            else:
                text += f'–ù–æ–≤—ã–µ –≥–ª–∞–≤—ã:\t—Å {manga.chapter_start} –ø–æ {manga.chapter_end}\n'
            text += '\n'
        return text
    return None


async def group_list_update_manga(
        updates: list,
        db_management: DatabaseManagement
):
    if updates is not None:
        updates_list = []
        for i in range(0, len(updates), LEN_UPDATE_LIST):
            updates_list.append(updates[i: i + LEN_UPDATE_LIST])
        updates = []
        for i, update in enumerate(updates_list, 0):
            update = await text_update_manga_for_all(i, update, db_management)
            updates.append(update)
        return updates
    return None


async def create_text_review_manga(
    hash_name: str, user_id: int, db_management: DatabaseManagement
) -> tuple[str]:
    descr = await _get_description(hash_name, db_management)
    if descr is not None:
        text = f'<b>{descr.name}</b>'
        if descr.users is not None and str(user_id) in descr.users:
            text += '\t\t<i>[–£–∂–µ –≤ —Å–ø–∏—Å–∫–µ!]</i>\n\n'
        else:
            text += '\t\t<i>[–í—Å–µ –µ—â—ë –Ω–µ —Å–ø–∏—Å–∫–µ!]</i>\n\n'
        text += f'–ñ–∞–Ω—Ä—ã: {descr.genre.lower() if descr.genre else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}\n\n'
        text += f'–û–ø–∏—Å–∞–Ω–∏–µ:\n\t\t{descr.description if descr.description else "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"}\n\n'
        text += f'–°—Å—ã–ª–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è: <a href="{descr.link}"> –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç </a>\n\n'
        return (text[: 1024], descr.image)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ caption - 1024
